{"version":3,"sources":["components/heading.js","components/form.js","components/forecast.js","components/footer.js","App.js","index.js"],"names":["Heading","props","className","Form","onSubmit","loadWeather","type","name","placeholder","Forecast","icon","src","alt","country","city","temperature","Math","round","feels","pressure","humidity","wind","description","error","Footer","year","Date","getFullYear","require","config","key","process","App","state","date","getWeather","e","a","form","target","elements","value","preventDefault","fetch","api_call","json","response","console","log","setState","main","temp","feels_like","sys","speed","weather","reset","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d989dc5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Heading = (props)=>{\n  return (\n    <div className=\"heading\">\n      <h1>What's the weather like?</h1>\n      <h3>Find out what the weather conditions are in your city.</h3>\n    </div>\n  )\n}\n\nexport default Heading;","import React from 'react';\n\nconst Form = (props)=>{\n  return (\n    <form onSubmit={props.loadWeather}>\n      <input type=\"text\" name =\"city\" placeholder=\"Your City\"/>\n      <input type =\"text\" name = \"country\" placeholder=\"Your Country\"/>\n      <button>Get Weather</button>\n       </form>\n  )\n}\n\nexport default Form;","import React from 'react';\n\nconst Forecast = (props)=>{\n \nreturn (\n  <div className = 'forecast'>\n <div className = 'content'>\n  {props.icon && <img src={`http://openweathermap.org/img/wn/${props.icon}.png`} alt =\"weather icon\" />}\n    {props.country && props.city && <p className = 'forecastPara'><span>{props.city},{props.country}</span></p>}\n    {props.temperature && <p className = 'forecastPara'>Temperature: <span>{Math.round(props.temperature)}°F</span></p>}\n    {props.feels && <p className = 'forecastPara'>Feels Like: <span>{Math.round(props.feels)}°F</span></p>}\n    {props.pressure && <p className = 'forecastPara'>Pressure: <span>{props.pressure}</span></p>}\n    {props.humidity && <p className = 'forecastPara'>Humidity: <span>{props.humidity}%</span></p>}\n    {props.wind && <p className = 'forecastPara'>Wind: <span>{Math.round(props.wind)}mph</span></p>}\n    {props.description && <p className='lastPara forecastPara'>Conditions: {props.description}</p>}\n    {props.error && <p>{props.error}</p>}\n    </div>\n    </div>\n)\n}\nexport default Forecast","import React from 'react'\n\nconst Footer = ()=>{\n  const name = 'KriSti';\n  const year = new Date().getFullYear()\nreturn(\n  <div className =\"footer\">\n    <p>Created by <span className =\"name\">{name}</span></p>\n    <p>Copyright {year}</p>\n  </div>\n)\n}\nexport default Footer;\n\n\n\n","import React from 'react';\nimport './App.css';\nimport Heading from './components/heading';\nimport Form from \"./components/form\"\nimport { render } from '@testing-library/react';\nimport Forecast from \"./components/forecast\"\nimport Footer from \"./components/footer\"\n\nrequire('dotenv').config()\nconst key = process.env.REACT_APP_API_KEY\n\nclass App extends React.Component {\n  state = {\n    date:\"\",\n    temperature: \"\",\n    feels:\"\",\n    city: \"\",\n    country: \"\",\n    wind:\"\",\n    humidity: \"\",\n    pressure: \"\",\n    icon: \"\",\n    description: \"\",\n    error: \"\"\n  }\n  getWeather = async (e)=> {\n    const form = e.target;\n    const city = e.target.elements.city.value;\n    const country =e.target.elements.country.value;\n    e.preventDefault();\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=imperial&appid=${key}`)\n\n    const response =await api_call.json();\n    console.log(response)\n    if(city && country){\n      this.setState({\n        temperature: response.main.temp,\n        feels: response.main.feels_like,\n        city: response.name,\n        country:response.sys.country,\n        humidity: response.main.humidity,\n        pressure:response.main.pressure,\n        wind:response.wind.speed,\n        icon: response.weather[0].icon,\n        description:response.weather[0].description,\n        error:'',\n        })\n      \n    }else{\n      this.setState({\n        error:'Please fill out input fields...'\n      })\n    }\n  form.reset()\n  }\nrender(){\n    return(\n      <div>\n      <Heading />\n      <Form loadWeather={this.getWeather}/>\n      <Forecast \n      date = {this.date}\n      temperature ={this.state.temperature}\n      feels = {this.state.feels}\n      city ={this.state.city}\n      country ={this.state.country}\n      humidity ={this.state.humidity}\n      pressure={this.state.pressure}\n      wind = {this.state.wind}\n      icon ={this.state.icon}\n      description ={this.state.description}\n      error ={this.state.error}\n    />\n    <Footer />\n        </div>\n    )\n  }\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}